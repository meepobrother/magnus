scalar Double

scalar Float

scalar Int32

scalar Int64

scalar Uint32

scalar Sint32

scalar Fixed32

scalar Sfixed32

scalar Uint64

scalar Sint64

scalar Fixed64

scalar Sfixed64

scalar Bool

scalar Bytes

scalar Empty

scalar Error

scalar Json

scalar Timestamp

scalar Date

"欢迎页信息"
type WelcomeInfo {
  "头部图片"
  image: String!
  "标题"
  title: String!
  "二级标题"
  secondTitle: String!
  "简介"
  desc: String!
}

"事件"
type Event {
  "时间类型id,可以根据时间类型进行路由跳转到事件列表页"
  id: Int!
  "时间名称"
  title: String!
  "时间简介"
  desc: String!
  "待处理消息个数"
  count: Int!
}

"模块"
type Module {
  title: String!
  events: [Event]!
}

"着陆页代办事项"
type ToDoItems {
  "今天的待办事项"
  today: [Module]!
  "昨天的代办事项"
  yestoday: [Module]!
  "本周的代办事项"
  thisweek: [Module]!
  "上周的代办事项"
  lastweek: [Module]!
  "30天内代办事项"
  within30Days: [Module]!
  "30天前代办事项"
  thirtyDaysAgo: [Module]!
}

"子系统"
type System {
  "图片"
  image: String!
  "标题"
  title: String!
  "连接"
  link: String!
}

"绑定页面数据"
type BindTokenData {
  "没有格式化的uid"
  id: String!
  "格式化后的用户uid"
  uid: String!
  "随机码"
  randomCode: String!
}

type CheckUserStateResult {
  "状态码\n200 可登录\n100 您需要绑定令牌\n101 需要修改密码\n102 需要输入token码"
  code: Int!
  "附加消息"
  message: String!
  "附加数据"
  data: BindTokenData!
}

"登录结果"
type LoginOutput {
  "返回码\n大于0成功\n小于0失败"
  code: Int!
  "返回码消息"
  message: String!
  "token\ncode >0 时携带"
  token: String
}

"绑定结果数据"
type BindUserTokenResult {
  "200 绑定成功\n-100 token不匹配"
  code: Int!
  "消息"
  message: String!
}

"绑定表单数据"
input BindUserTokenInput {
  "用户uid"
  uid: Int!
  "随机码"
  randomCode: String!
  "token值"
  token: String!
}

type DeleteDomainResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type DomainData {
  "域简称"
  desc: String
  "域编号"
  id: Int
  "域标题"
  title: String
  "域编号"
  code: String
  "域状态"
  status: Int
  "创建日期"
  createDate: String
  "创建人"
  createUserName: String
  "创建人Id"
  createUserId: String
}

type FindDomainDataResult {
  count: Int
  list: [DomainData]
}

type FindDomainResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FindDomainDataResult
}

input FindDomainInput {
  "页码"
  page: Int
  "尺寸"
  psize: Int
  "标题"
  title: String
  "编号"
  code: String
}

type ForbidDomainResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input ForbidDomainInput {
  "域id"
  id: Int!
  "状态"
  status: Int!
}

type DoaminData {
  "域编号"
  id: Int!
  "域编码"
  code: String!
  "域名称"
  title: String!
  "域简称"
  desc: String!
  "创建日期"
  createDate: String!
  "创建人"
  createUserName: String!
  "创建人id"
  createUserId: Int!
  "状态"
  status: Int
}

type GetDomainResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: DoaminData
}

type SaveDomainResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

"保存域输入"
input SaveDomainInput {
  "域id"
  id: Int
  "域编号"
  code: String
  "域标题"
  title: String
  "域简称"
  desc: String
}

type AddAlarmPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type DeleteAlarmPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindAlarmPlanData {
  "预案序号"
  id: Int!
  "预案名称"
  title: String!
  "优先级"
  priority: String!
  "预案描述"
  desc: String!
  "创建时间"
  createDate: String
  "创建人"
  createUser: String
}

type FindAlarmPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FindAlarmPlanData
}

input CreateDateInput {
  "new Date(`年-月-日 时-分-秒`).toISOString()"
  start: String
  "new Date().toISOString()"
  end: String
}

input CreateUserInput {
  "创建人名字"
  createUserName: String
  "创建人id"
  createUserId: Int
}

input FindAlarmPlanInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "预案名称"
  title: String!
  "创建时间 开始and结束"
  createDate: CreateDateInput
  "创建人"
  createUser: CreateUserInput
}

type forbidAlarmPlanResult {
  "返回码"
  code: Int!
  "返回数据"
  message: String!
}

input ForbidAlarmPlanInput {
  "预案id"
  id: Int!
  "状态"
  status: Int!
}

type GetAlarmPlanData {
  id: Int!
}

type GetAlarmPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: GetAlarmPlanData
}

type SaveAlarmPlanResult {
  code: Int!
  message: String!
}

type FindMenuResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据\r\nid\r\ntitle\r\nicon\r\nstatus\r\nchildren"
  data: [Json]
}

type SaveMenuData {
  "菜单id"
  menuId: Int
  "状态"
  status: Int
  "图标"
  icon: String
  "标题"
  title: String
  children: [SaveMenuData]!
}

type SaveMenuRsesult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: SaveMenuData
}

input SaveMenuInput {
  "菜单id"
  menuId: Int
  "状态"
  status: Int
  "图标"
  icon: String
  "标题"
  title: String
}

type DeleteModuleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindModuleData {
  "数据源id"
  id: Int!
  "模块名称"
  name: String!
  "链接"
  link: String!
  "状态"
  status: Int!
  "数据协议"
  dataProtocol: String!
}

type FindModuleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [FindModuleData]
}

input FindModuleInput {
  "页码"
  page: Int!
  "每页数量"
  psize: Int!
  "模块名称"
  name: String!
  "模块链接"
  link: String!
}

type ForbidModuleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input ForbidModuleInput {
  "菜单id"
  id: Int!
  "状态"
  status: Int!
}

type GetModuleData {
  "数据id"
  id: Int!
  "模块名称"
  name: String!
  "数据链接"
  link: String!
  "状态"
  status: Int!
  "数据协议"
  dataProtocol: String!
}

type GetModuleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: GetModuleData
}

type DeleteCaptureResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindCaptureData {
  "设备序号"
  id: Int!
  "设备名称"
  title: String
  "通道"
  aisle: String
  "抓图原因"
  reason: String
  "备注"
  remarks: String
  "创建日期"
  createDate: String
  "创建人"
  createUserName: String
}

type FindCaptureResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FindCaptureData
}

input FindCaptureInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "设备id"
  deviceId: String!
  "设备名称"
  title: String
  "抓图原因"
  reason: String
  "创建时间"
  createDate: CreateDateInput
  "创建人"
  createUser: CreateUserInput
}

type SaveCaptureResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input SaveCaptureInput {
  "抓图原因"
  reason: String
  "备注"
  remarks: String
}

type FindPagePermissionData {
  "权限类型"
  type: String!
  "角色id"
  roleId: Int!
  "基础平台id"
  fromSystemId: Int
}

type FindPagePermissionResult {
  "状态码"
  code: Int!
  "消息"
  message: String!
  "数据"
  data: FindPagePermissionData
}

type GetActionPermissionData {
  id: Int!
  type: String!
  title: String!
  code: String!
  children: [GetActionPermissionData]!
}

type GetPermissionResult {
  data: GetActionPermissionData
  code: Int!
  message: String!
}

type FindRoleDate {
  "序号"
  id: Int!
  "角色名称"
  roleName: String!
  "角色标识"
  roleIdentification: String!
  "角色描述"
  roleDesc: String!
  "数据权限"
  dataPermission: String!
  "创建人"
  createUserName: String!
  "父级角色"
  parentRole: String!
  "创建时间"
  createDate: Int!
}

type FindRoleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [FindRoleDate]
}

input FindRoleInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "角色名"
  roleName: String
  "创建人"
  createUserId: Int
  "创建时间 开始and结束"
  createDate: CreateDateInput
}

type Right {
  "权限id"
  id: Int
  "权限名字"
  title: String
}

type GetRoleData {
  "1选中\r\n0未选中"
  status: Int
  "角色id"
  id: Int
  "角色名字"
  title: String
  "角色标识"
  code: String
  "角色描述"
  desc: String
  "数据权限"
  rights: [Right]
  "创建人"
  createDate: String
}

type GetRoleResult {
  "角色的返回码"
  code: Int!
  "角色的返回信息"
  message: String!
  "角色的返回数据"
  date: [GetRoleData]
}

input GetRoleGroupInput {
  "角色组id"
  groupId: Int!
  "角色名称"
  roleTitle: String
  "角色标识"
  roleCode: String
  "创建人id"
  createUserId: Int
  "开始时间"
  startDate: String
  "结束时间"
  endDate: String
  "页码"
  page: Int
  "每页数量"
  psize: Int
}

type SaveRoleRightResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input RoleInput {
  "角色名称"
  title: String!
  "角色id"
  id: Int!
}

input SaveRoleRightInput {
  "角色id"
  id: Int!
  "角色组拥有的角色"
  ownRoles: [RoleInput]!
}

type DeleteRoleRightResult {
  ""
  code: Int!
  ""
  message: String!
}

input DeleteRoleRightInput {
  "角色id"
  id: Int!
  "角色组拥有的角色"
  ownRoles: [RoleInput]!
}

type Role {
  "角色名称"
  title: String!
  "角色id"
  id: Int!
}

type SaveResultData {
  "角色id"
  id: Int!
  "角色名称"
  roleName: String!
  "角色标识"
  roleIdentification: String!
  "角色描述"
  roleDescription: String!
  "基础角色"
  basicRole: [Role]!
  "互斥角色"
  mutexRole: [Role]!
  "状态"
  status: Int!
  "创建日期"
  createDate: String!
  "创建人"
  createUserName: String!
}

type SaveRoleResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: SaveResultData
}

input SaveRoleInput {
  "角色id"
  id: Int
  "角色名称"
  roleName: String
  "角色标识"
  roleIdentification: String
  "角色描述"
  roleDescription: String
  "基础角色"
  basicRole: [Int]
  "互斥角色"
  mutexRole: [Int]
}

type DeleteRoundPatrolResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FinRoundPatrolData {
  "任务序号"
  id: Int
  "任务名称"
  title: String
  "窗口数"
  windows: Int
  "任务描述"
  desc: String
  "创建日期"
  createDate: String
  "创建人"
  createUserName: String
}

type FinRoundPatrolResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FinRoundPatrolData
}

input FindRoundPatrolInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "任务名称"
  title: String
  "创建时间"
  createDate: CreateDateInput
  "创建人"
  createUser: CreateUserInput
}

type box {
  "窗口id"
  id: Int!
  "组织"
  organiztion: String!
  "设备名称"
  title: String!
  "码流"
  codeStream: String!
  "时长"
  duration: Int!
}

type GetRoundPatrolData {
  "任务id"
  id: Int!
  "任务名称"
  title: String!
  "分屏样式"
  screenStyle: String!
  "任务描述"
  desc: String!
  "创建人"
  createUserName: String!
  "创建人id"
  createUserId: Int!
  "创建日期"
  createDate: String!
  "窗口配置"
  windowConfig: [box]!
}

type GetRoundPatrolResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: GetRoundPatrolData
}

type SaveRoundPatrolResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input boxInput {
  "窗口id"
  id: Int!
  "组织"
  organiztion: String!
  "设备名称"
  title: String!
  "码流"
  codeStream: String!
  "时长"
  duration: Int!
}

input SaveRoundPatrolInput {
  "任务id"
  id: Int
  "任务名称"
  title: String
  "分屏样式"
  screenStyle: String
  "任务描述"
  desc: String
  "当前窗口"
  windowConfig: [boxInput]!
}

type DeleteStationResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindStationData {
  "序号"
  id: Int!
  "岗位名称"
  positionTitle: String!
  "岗位编号"
  jobNumber: String!
  "岗位描述"
  jobDescription: String!
  "拥有角色"
  haveRole: [String]!
  "创建人"
  createUserName: String!
  "创建时间"
  createDate: String!
}

type FindStationResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [FindStationData]
}

input FindStationInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "岗位名称"
  positionTitle: String
  "创建人"
  createUserUsername: String
  "创建时间 开始and结束"
  createDate: Empty
}

type ForbidStationResult {
  "返回码"
  code: Int!
  "返回数据"
  message: String!
}

input ForbidStationInput {
  "id"
  id: Int!
  "状态"
  status: Int!
}

type GetStationDepartment {
  id: Int!
  title: String!
}

type GetStationRoleGroup {
  id: Int!
  title: String!
}

"GetStation的岗位信息"
type GetStationData {
  "部门"
  department: GetStationDepartment!
  "岗位编号"
  jobNumber: String!
  "岗位名称"
  positionTitle: String!
  "岗位描述"
  jobDescription: String!
  "/\n岗位职责"
  jobResponsibilities: String!
  "岗位要求"
  jobRequirements: String!
  "角色组"
  roleGroup: GetStationRoleGroup!
  "状态"
  status: Int!
}

type GetStationResult {
  code: Int!
  message: String!
  data: GetStationData
}

type SaveDepartmentResult {
  code: Int!
  message: String!
  "返回数据\r\nid\r\ntitle\r\nchildren"
  data: [Json]
}

input SaveDepartmentInput {
  id: Int
  title: String
  icon: String
  status: Int
  children: [Json]
}

type SaveStationResult {
  code: Int!
  message: String!
}

input SaveStationInput {
  id: Int!
  departmentId: Int
  jobNumber: String
  positionTitle: String
  jobDescription: String
  jobResponsibilities: String
  jobRequirements: String
  roleGroupId: Int
}

type GetAllDepartmentResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "部门id\nid: number;\n部门下面的子部门\nchildren: GetAllDepartmentData[];\n部门名称\ntitle: string;"
  data: [Json]
}

input GetAllDepartmentInput {
  title: String
}

type DeleteDepartmentResult {
  code: Int!
  message: String!
}

input DeleteDepartmentInput {
  "部门id"
  id: Int!
}

type GetAllStationData {
  "岗位id"
  id: Int!
  "岗位名称"
  title: String!
}

type GetAllStationByDepartmentResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [GetAllStationData]
}

input GetAllStationByDepartmentInput {
  "部门id"
  departmentId: Int!
}

type GetAllUSerData {
  "用户名称"
  title: String!
  "用户id"
  id: String!
}

type GetAllUserByStationResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [GetAllUSerData]
}

input GetAllUserByStationInput {
  "岗位id"
  stationId: Int!
}

type DeleteStationUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input DeleteStationUserInput {
  "用户id"
  uid: Int!
  "岗位id"
  stationId: Int!
}

type AddStationUserResult {
  "返回码"
  code: Int!
  "返回结果"
  message: String!
}

input AddStationUserInput {
  "岗位id"
  stationId: Int!
  "用户id"
  uid: Int!
}

type FindSummaryData {
  "设备名称"
  title: String
  "视频链接"
  link: String
  "视频日期"
  date: String
}

type FindSummaryResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FindSummaryData
}

input TimeInput {
  "开始时间-结束时间"
  start: String
  end: String
}

input FindSummaryInput {
  "undefined 代表全选\r\nstring[] 标识设备id数组"
  deviceIds: [String]
  "目标类型"
  type: String
  "目标大小"
  size: String
  "目标速度"
  speed: String
  "目标颜色"
  color: String
  "时间"
  time: TimeInput
  "运动方向"
  direction: String
  "车牌号"
  numberPlate: String
}

type SaveSummaryResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input dateInput {
  "开始时间-结束时间"
  start: String
  end: String
}

input SaveSummaryInput {
  "设备"
  deviceId: String
  "位置"
  position: String
  "时间"
  time: dateInput
  "车牌号"
  numberPlate: String
  "目标类型"
  type: String
  "目标大小"
  size: String
  "目标速度"
  speed: String
  "目标颜色"
  color: String
  "运动方向"
  direction: String
}

type FindSystemRight {
  "权限id"
  id: Int!
  "权限名称"
  title: String!
  "权限类型"
  type: Int!
}

type FindSystemResult {
  "系统编号"
  id: Int!
  "系统名称"
  title: String!
  "首页地址"
  link: String!
  "拥有权限"
  rights: FindSystemRight!
}

input FindSystemInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "模块名称"
  title: String
  "模块启动ip"
  ip: String
  "端口号"
  port: Int
}

type GetSystemRight {
  "权限编号"
  id: Int!
  "权限名称"
  title: String!
}

type GetSystemData {
  "系统、模块Id"
  id: Int!
  "模块、系统标题"
  title: String!
  "模块、系统连接"
  link: String!
  "模块、系统权限"
  rights: [GetSystemRight]!
}

type GetSystemResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: GetSystemData
}

type ConfirmUserPasswordResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input ConfirmUserPasswordInput {
  "密码"
  password: String
}

type DeleteUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindUserData {
  "序号"
  id: Int
  "用户名"
  username: String
  "手机号"
  mobile: String
  "部门名称"
  departmentTitle: String
  "角色"
  roles: [String]
  "状态 0:禁用状态;1:启用状态;-1:禁用后被启用"
  status: Int
  "创建时间"
  createDate: String
  "创建人"
  createUserName: String
}

type FindUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: [FindUserData]
}

input FindUserDateInput {
  "new Date(`年-月-日 时-分-秒`).toISOString()"
  start: String
  "new Date().toISOString()"
  end: String
}

input DepartmentOrStationInput {
  "type = 'department' 部门, id是部门的id\r\ntype = 'station' id是岗位的id"
  type: String!
  id: Int!
}

input FindUserInput {
  "页码"
  page: Int
  "每页数量"
  psize: Int
  "名称"
  username: String
  "手机号"
  mobile: String
  "状态\r\n状态码:0:禁用状态;1:启用状态;-1:禁用后被启用"
  status: Int
  "创建时间  开始and结束"
  createDate: FindUserDateInput
  createUserId: Int
  departmentOrStation: DepartmentOrStationInput
}

type ForbidUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input ForbidUserInput {
  "用户id"
  uid: Int!
  "状态:0:禁用状态 1:启用状态 -1: 禁用后启用"
  status: Int!
}

type GetUsertations {
  id: Int!
  title: String!
}

type GetUserResultData {
  "用户id"
  id: String
  "用户名称"
  username: String!
  "电话号码"
  mobile: String
  "电子邮箱"
  email: String
  "任岗的id和title"
  stations: [GetUsertations]
  "绑定人员的id"
  bindingStaff: GetUsertations
  "状态"
  status: Int
  "创建时间"
  createDate: String
  "创建人"
  createUserName: String
}

type GetUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: GetUserResultData
}

type SaveUserData {
  "用户ID"
  id: String
  "用户名"
  username: String
  "电话号码"
  mobile: String
  "电子邮箱"
  email: String
  "岗位"
  renGang: [String]
  "绑定人员"
  bindingStaff: String
}

type SaveUserResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: SaveUserData
}

input SaveUserInput {
  "用户id"
  id: Int
  "用户名称"
  username: String
  "电话号码"
  mobile: String
  "电子邮箱"
  email: String
  "任岗的id"
  renGang: [Int]
  "绑定人员的id"
  bindingStaff: Int
}

type UpdateUserPasswordResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input UpdateUserPasswordInput {
  "新密码"
  newPassword: String!
  "密码确认"
  passwordConfirmation: String!
  "用户Id"
  uid: Int!
}

type DeleteWallPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

type FindWallPlanData {
  "预案名称"
  title: String!
  "描述"
  desc: String!
  "创建人"
  cearteUserName: String!
  "日期时间"
  cearteDate: String!
}

type FindWallPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
  "返回数据"
  data: FindWallPlanData
}

input FindWallPlanInput {
  "预案id"
  id: Int!
  "预案名称"
  title: String!
  "创建时间"
  createDate: CreateDateInput
  "创建人"
  createUser: CreateUserInput
}

type saveWallPlanResult {
  "返回码"
  code: Int!
  "返回信息"
  message: String!
}

input saveWallPlanInput {
  "预案名称"
  title: String!
  "预案描述"
  desc: String!
  "设备id"
  deviceId: String!
}

type Query {
  "欢迎页信息"
  getWelcomeInfo: WelcomeInfo
  "获取欢迎页代办事项"
  getWelcomeToDoItems: ToDoItems
  "获取欢迎页展示子系统"
  getWelcomeSystems: [System]
  "重新获取随机码"
  createRandomCode: String
  "检查用户状态"
  checkUserState(username: String!): CheckUserStateResult
  "用户登录"
  login(username: String!, password: String!): LoginOutput
  "查找域"
  findDomain(
    "查找条件"
    entity: FindDomainInput!
  ): FindDomainResult
  "获取域详情"
  getDomain(
    "域id"
    id: Int!
  ): GetDomainResult
  "获取所有的报警预案"
  findAlarmPlan(
    "查询条件"
    entity: FindAlarmPlanInput!
  ): FindAlarmPlanResult
  getAlarmPlan: FindPagePermissionResult
  findmenu: FindMenuResult
  findModule(entity: FindModuleInput!): FindModuleResult
  getModule(id: Int!): GetModuleResult
  "查抓图"
  findCapture(
    "查找条件"
    entity: FindCaptureInput!
  ): FindCaptureResult
  getPermission: GetPermissionResult
  findRole(entity: FindRoleInput!): FindRoleResult
  getRole(entity: GetRoleGroupInput!): GetRoleResult
  "轮巡任务-通过条件查询轮巡任务列表"
  findRoundPatrol(entity: FindRoundPatrolInput!): FinRoundPatrolResult
  "获取任务详情"
  getRoundPatrol(
    "任务id"
    id: Int!
  ): GetRoundPatrolResult
  "根据指定条件查询批量的岗位"
  findStation(
    "查询条件"
    entity: FindStationInput!
  ): FindStationResult
  "根据岗位id获取岗位的信息"
  getStation(
    "岗位id"
    id: Int!
  ): GetStationResult
  getAllDepartment(entity: GetAllDepartmentInput!): GetAllDepartmentResult
  "通过部门获取所有岗位"
  getAllStationByDepartment(
    "查询条件,部门id"
    entity: GetAllStationByDepartmentInput!
  ): GetAllStationByDepartmentResult
  "通过岗位获取所有用户"
  getAllUserByStation(
    "查询条件,岗位id"
    entity: GetAllUserByStationInput!
  ): GetAllUserByStationResult
  findSummary(entity: FindSummaryInput!): FindSummaryResult
  "模块管理-根据条件获取模块列表"
  findSystem(entity: FindSystemInput): [FindSystemResult]
  "获取系统详情"
  getSystem(
    "系统id"
    id: Int!
  ): GetSystemResult
  confirmUserPassword(entity: ConfirmUserPasswordInput!): ConfirmUserPasswordResult
  findUser(entity: FindUserInput!, user: Empty!): FindUserResult
  getUser(uid: Int!): GetUserResult
  findWallPlan(entity: FindWallPlanInput!): FindWallPlanResult
}

type Mutation {
  verifyUserToken(token: String!, uid: Int!): Boolean
  "绑定随机码"
  bindUserToken(entity: BindUserTokenInput!): BindUserTokenResult
  "伪删除域管理\r\nstatus -1 删除成功!"
  deleteDomain(
    "根据id,状态删除"
    id: Int!
  ): DeleteDomainResult
  "域禁用\r\nstatus 0为禁用 1启用成功"
  forbidDomain(
    ""
    entity: ForbidDomainInput!
  ): ForbidDomainResult
  "保存域 编辑域"
  saveDomain(
    ""
    entity: SaveDomainInput!
  ): SaveDomainResult
  "新增报警预案"
  AddAlarmPlan(
    "预案id"
    id: Int!
  ): AddAlarmPlanResult
  "删除报警预案"
  deleteAlarmPlan(
    "预案id"
    id: Int!
  ): DeleteAlarmPlanResult
  "报警预案禁用\r\nstatus 0为禁用 1启用成功"
  forbidAlarmPlan(
    ""
    entity: ForbidAlarmPlanInput!
  ): forbidAlarmPlanResult
  saveAlarmPlan: SaveAlarmPlanResult
  saveMenu(entity: SaveMenuInput!): SaveMenuRsesult
  deleteModule(id: Int!): DeleteModuleResult
  forbidModule(entity: ForbidModuleInput!): ForbidModuleResult
  "根据设备id删除抓拍图片"
  deleteCapture(
    "设备id"
    id: Int!
  ): DeleteCaptureResult
  saveCapture(entity: SaveCaptureInput!): SaveCaptureResult
  saveRoleRight(entity: SaveRoleRightInput!): SaveRoleRightResult
  deleteRoleRight(entity: DeleteRoleRightInput!): DeleteRoleRightResult
  savaRole(entity: SaveRoleInput!): SaveRoleResult
  "通过任务id删除任务详情"
  deleteRoundPatrol(id: Int!): DeleteRoundPatrolResult
  "轮巡编辑-保存"
  saveRoundPatrol(
    ""
    entity: SaveRoundPatrolInput!
  ): SaveRoundPatrolResult
  deleteStation(id: Int!): DeleteStationResult
  "禁用岗位"
  forbidStation(entity: ForbidStationInput!): ForbidStationResult
  "保存部门 编辑部门 删除部门"
  saveDepartment(
    ""
    entity: SaveDepartmentInput!
  ): SaveDepartmentResult
  saveStation(entity: SaveStationInput!): SaveStationResult
  deleteDepartment(entity: DeleteDepartmentInput!): DeleteDepartmentResult
  "删除岗位的用户"
  deleteStationUser(
    "删除条件,岗位id和用户id"
    entity: DeleteStationUserInput!
  ): DeleteStationUserResult
  "添加岗位的用户"
  addStationUser(
    "添加条件,岗位id和用户id"
    entity: AddStationUserInput!
  ): AddStationUserResult
  saveSummary(entity: SaveSummaryInput!): SaveSummaryResult
  deleteUser(uid: Int!): DeleteUserResult
  forbidUser(entity: ForbidUserInput!): ForbidUserResult
  saveUser(entity: SaveUserInput!): SaveUserResult
  updateUserPassword(entity: UpdateUserPasswordInput!): UpdateUserPasswordResult
  "根据预案id 删除上墙预案"
  deleteWallPlan(
    "预案id"
    id: Int!
  ): DeleteWallPlanResult
  saveWallPlan(entity: saveWallPlanInput!): saveWallPlanResult
}
