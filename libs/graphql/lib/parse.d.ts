import * as graphql from 'graphql';
import * as ast from './ast';
export declare class ParseVisitor implements ast.Visitor {
    name: string;
    visit(node: any, context: graphql.ASTNode): any;
    visitNameAst(node: ast.NameAst, context: graphql.NameNode): ast.NameAst<any, any>;
    createKeywordAst(node: ast.NameAst, context: string): ast.NameAst<any, any>;
    visitVariableDefinitionAst(node: ast.VariableDefinitionAst, context: graphql.VariableDefinitionNode): ast.VariableDefinitionAst<any, any>;
    visitDirectiveAst(node: ast.DirectiveAst, context: graphql.DirectiveNode): ast.DirectiveAst<any, any>;
    visitSelectionSetAst(node: ast.SelectionSetAst, context: graphql.SelectionSetNode): ast.SelectionSetAst<any, any>;
    visitVariableAst(node: ast.VariableAst, context: graphql.VariableNode): ast.VariableAst<any, any>;
    visitIntValueAst(node: ast.IntValueAst, context: graphql.IntValueNode): ast.IntValueAst<any, any>;
    visitFloatValueAst(node: ast.FloatValueAst, context: graphql.FloatValueNode): ast.FloatValueAst<any, any>;
    visitBooleanValueAst(node: ast.BooleanValueAst, context: graphql.BooleanValueNode): ast.BooleanValueAst<any, any>;
    visitValueAst(node: undefined, context: graphql.ValueNode): any;
    visitEnumValueAst(node: ast.EnumValueAst, context: graphql.EnumValueNode): ast.EnumValueAst<any, any>;
    visitListValueAst(node: ast.ListValueAst, context: graphql.ListValueNode): ast.ListValueAst<any, any>;
    visitObjectValueAst(node: ast.ObjectValueAst, context: graphql.ObjectValueNode): ast.ObjectValueAst<any, any>;
    visitObjectFieldAst(node: ast.ObjectFieldAst, context: graphql.ObjectFieldNode): ast.ObjectFieldAst<any, any>;
    visitNullValueAst(node: ast.NullValueAst, context: graphql.NullValueNode): ast.NullValueAst<any, any>;
    visitArgumentAst(node: ast.ArgumentAst, context: graphql.ArgumentNode): ast.ArgumentAst<any, any>;
    visitFieldAst(node: ast.FieldAst, context: graphql.FieldNode): ast.FieldAst<any, any>;
    visitFragmentSpreadAst(node: ast.FragmentSpreadAst, context: graphql.FragmentSpreadNode): ast.FragmentSpreadAst<any, any>;
    visitInlineFragmentAst(node: ast.InlineFragmentAst, context: graphql.InlineFragmentNode): ast.InlineFragmentAst<any, any>;
    visitSelectionAst(node: undefined, context: graphql.SelectionNode): ast.SelectionAst<any, any>;
    visitOperationDefinitionAst(node: ast.OperationDefinitionAst, context: graphql.OperationDefinitionNode): ast.OperationDefinitionAst<any, any>;
    visitNamedTypeAst(node: ast.NamedTypeAst, context: graphql.NamedTypeNode): ast.NamedTypeAst<any, any>;
    visitFragmentDefinitionAst(node: ast.FragmentDefinitionAst, context: graphql.FragmentDefinitionNode): ast.FragmentDefinitionAst<any, any>;
    visitSchemaDefinitionAst(node: ast.SchemaDefinitionAst, context: graphql.SchemaDefinitionNode): ast.SchemaDefinitionAst<any, any>;
    visitOperationTypeDefinitionAst(node: ast.OperationTypeDefinitionAst, context: graphql.OperationTypeDefinitionNode): ast.OperationTypeDefinitionAst<any, any>;
    visitDirectiveDefinitionAst(node: ast.DirectiveDefinitionAst, context: graphql.DirectiveDefinitionNode): ast.DirectiveDefinitionAst<any, any>;
    visitScalarTypeDefinitionAst(node: ast.ScalarTypeDefinitionAst, context: graphql.ScalarTypeDefinitionNode): ast.ScalarTypeDefinitionAst<any, any>;
    visitStringValueAst(node: ast.StringValueAst, context: graphql.StringValueNode): ast.StringValueAst<any, any>;
    visitInputValueDefinitionAst(node: ast.InputValueDefinitionAst, context: graphql.InputValueDefinitionNode): ast.InputValueDefinitionAst<any, any>;
    visitListTypeAst(node: ast.ListTypeAst, context: graphql.ListTypeNode): ast.ListTypeAst<any, any>;
    visitNonNullTypeAst(node: ast.NonNullTypeAst, context: graphql.NonNullTypeNode): ast.NonNullTypeAst<any, any>;
    visitTypeAst(node: undefined, context: graphql.TypeNode): ast.TypeAst<any, any>;
    visitFieldDefinitionAst(node: ast.FieldDefinitionAst, context: graphql.FieldDefinitionNode): ast.FieldDefinitionAst<any, any>;
    visitObjectTypeDefinitionAst(node: ast.ObjectTypeDefinitionAst, context: graphql.ObjectTypeDefinitionNode): ast.ObjectTypeDefinitionAst<any, any>;
    visitInterfaceTypeDefinitionAst(node: ast.InterfaceTypeDefinitionAst, context: graphql.InterfaceTypeDefinitionNode): ast.InterfaceTypeDefinitionAst<any, any>;
    visitUnionTypeDefinitionAst(node: ast.UnionTypeDefinitionAst, context: graphql.UnionTypeDefinitionNode): ast.UnionTypeDefinitionAst<any, any>;
    visitEnumTypeDefinitionAst(node: ast.EnumTypeDefinitionAst, context: graphql.EnumTypeDefinitionNode): ast.EnumTypeDefinitionAst<any, any>;
    visitEnumValueDefinitionAst(node: ast.EnumValueDefinitionAst, context: graphql.EnumValueDefinitionNode): ast.EnumValueDefinitionAst<any, any>;
    visitInputObjectTypeDefinitionAst(node: ast.InputObjectTypeDefinitionAst, context: graphql.InputObjectTypeDefinitionNode): ast.InputObjectTypeDefinitionAst<any, any>;
    visitSchemaExtensionAst(node: ast.SchemaExtensionAst, context: graphql.SchemaExtensionNode): ast.SchemaExtensionAst<any, any>;
    visitScalarTypeExtensionAst(node: ast.ScalarTypeExtensionAst, context: graphql.ScalarTypeExtensionNode): ast.ScalarTypeExtensionAst<any, any>;
    visitObjectTypeExtensionAst(node: ast.ObjectTypeExtensionAst, context: graphql.ObjectTypeExtensionNode): ast.ObjectTypeExtensionAst<any, any>;
    visitInterfaceTypeExtensionAst(node: ast.InterfaceTypeExtensionAst, context: graphql.InterfaceTypeExtensionNode): ast.InterfaceTypeExtensionAst<any, any>;
    visitUnionTypeExtensionAst(node: ast.UnionTypeExtensionAst, context: graphql.UnionTypeExtensionNode): ast.UnionTypeExtensionAst<any, any>;
    visitEnumTypeExtensionAst(node: ast.EnumTypeExtensionAst, context: graphql.EnumTypeExtensionNode): ast.EnumTypeExtensionAst<any, any>;
    visitInputObjectTypeExtensionAst(node: ast.InputObjectTypeExtensionAst, context: graphql.InputObjectTypeExtensionNode): ast.InputObjectTypeExtensionAst<any, any>;
    visitDocumentAst(node: ast.DocumentAst, context: graphql.DocumentNode): ast.DocumentAst<any, any>;
}
export declare function parse(source: string | graphql.Source, options?: graphql.ParseOptions): ast.DocumentAst<any, any>;
