import * as ast from "./ast";
import * as l from "graphql/language";
export declare function toJson(node: ast.DocumentAst): l.DocumentNode;
export declare class ToJsonVisitor<C = any> implements ast.Visitor<C, l.ASTNode> {
    name: string;
    visitTypeDefinitionAst(node: ast.TypeDefinitionAst<C, l.ASTNode>, context: C): l.ASTNode;
    visitDefinitionAst(node: ast.DefinitionAst<C, l.ASTNode>, context: C): l.ASTNode;
    visitObjectFieldAst(node: ast.ObjectFieldAst<C, l.ASTNode>, context: C): any;
    visitorTypeDefinitionAst(node: ast.TypeDefinitionAst, context: C): l.ASTNode;
    visitorDefinitionAst(node: ast.DefinitionAst, context: C): l.ASTNode;
    visitTypeSystemDefinitionAst(node: ast.TypeSystemDefinitionAst, context: C): l.ASTNode;
    visitExecutableDefinitionAst(node: ast.ExecutableDefinitionAst, context: C): l.ASTNode;
    visitSchemaExtensionNode(node: ast.SchemaExtensionAst, context: C): l.SchemaDefinitionNode;
    visitTypeExtensionNode(node: ast.TypeExtensionAst, context: C): l.TypeExtensionNode;
    visitTypeSystemExtensionNode(node: ast.TypeSystemExtensionAst, context: C): l.ASTNode;
    visitDocumentAst(node: ast.DocumentAst, context: C): l.DocumentNode;
    visitVariableAst(node: ast.VariableAst, context: C): l.VariableNode;
    visitIntValueAst(node: ast.IntValueAst, context: C): l.IntValueNode;
    visitFloatValueAst(node: ast.FloatValueAst, context: C): l.FloatValueNode;
    visitStringValueAst(node: ast.StringValueAst, context: C): l.StringValueNode;
    visitBooleanValueAst(node: ast.BooleanValueAst, context: C): l.BooleanValueNode;
    visitNullValueAst(node: ast.NullValueAst, context: C): l.NullValueNode;
    visitEnumValueAst(node: ast.EnumValueAst, context: C): l.EnumValueNode;
    visitListValueAst(node: ast.ListValueAst, context: C): l.ListValueNode;
    visitObjectValueAst(node: ast.ObjectValueAst, context: C): l.ObjectValueNode;
    visitAstVisitor(node: ast.ObjectFieldAst, context: C): l.ObjectFieldNode;
    visitUnionTypeExtensionAst(node: ast.UnionTypeExtensionAst, context: C): l.UnionTypeExtensionNode;
    visitScalarTypeExtensionAst(node: ast.ScalarTypeExtensionAst, context: C): l.ScalarTypeExtensionNode;
    visitObjectTypeExtensionAst(node: ast.ObjectTypeExtensionAst, context: C): l.ObjectTypeExtensionNode;
    visitNamedTypeAst(node: ast.NamedTypeAst, context: C): l.NamedTypeNode;
    visitInterfaceTypeExtensionAst(node: ast.InterfaceTypeExtensionAst, context: C): l.InterfaceTypeExtensionNode;
    visitFieldDefinitionAst(node: ast.FieldDefinitionAst, context: C): l.FieldDefinitionNode;
    visitInputValueDefinitionAst(node: ast.InputValueDefinitionAst, context: C): l.InputValueDefinitionNode;
    visitEnumTypeExtensionAst(node: ast.EnumTypeExtensionAst, context: C): l.EnumTypeExtensionNode;
    visitEnumValueDefinitionAst(node: ast.EnumValueDefinitionAst, context: C): l.EnumValueDefinitionNode;
    visitInputObjectTypeExtensionAst(node: ast.InputObjectTypeExtensionAst, context: C): l.InputObjectTypeExtensionNode;
    visitOperationDefinitionAst(node: ast.OperationDefinitionAst, context: C): l.OperationDefinitionNode;
    visitFieldAst(node: ast.FieldAst, context: C): l.FieldNode;
    visitFragmentSpreadAst(node: ast.FragmentSpreadAst, context: C): l.FragmentSpreadNode;
    visitInlineFragmentAst(node: ast.InlineFragmentAst, context: C): l.InlineFragmentNode;
    visitVariableDefinitionAst(node: ast.VariableDefinitionAst, context: C): l.VariableDefinitionNode;
    visitSelectionSetAst(node: ast.SelectionSetAst, context: C): l.SelectionSetNode;
    visitFragmentDefinitionAst(node: ast.FragmentDefinitionAst, context: C): l.FragmentDefinitionNode;
    visitSchemaDefinitionAst(node: ast.SchemaDefinitionAst, context: C): l.SchemaDefinitionNode;
    visitOperationTypeDefinitionAst(node: ast.OperationTypeDefinitionAst, context: C): l.OperationTypeDefinitionNode;
    visitDirectiveDefinitionAst(node: ast.DirectiveDefinitionAst, context: C): l.DirectiveDefinitionNode;
    visitScalarTypeDefinitionAst(node: ast.ScalarTypeDefinitionAst, context: C): l.ScalarTypeDefinitionNode;
    visitObjectTypeDefinitionAst(node: ast.ObjectTypeDefinitionAst, context: C): l.ObjectTypeDefinitionNode;
    visitInterfaceTypeDefinitionAst(node: ast.InterfaceTypeDefinitionAst, context: C): l.InterfaceTypeDefinitionNode;
    visitUnionTypeDefinitionAst(node: ast.UnionTypeDefinitionAst, context: C): any;
    visitEnumTypeDefinitionAst(node: ast.EnumTypeDefinitionAst, context: C): l.EnumTypeDefinitionNode;
    visitInputObjectTypeDefinitionAst(node: ast.InputObjectTypeDefinitionAst, context: C): l.InputObjectTypeDefinitionNode;
    visitSchemaExtensionAst(node: ast.SchemaExtensionAst, context: C): l.SchemaExtensionNode;
    visitNameAst(node: ast.NameAst, context: C): l.NameNode;
    visitListTypeAst(node: ast.ListTypeAst, context: C): l.ListTypeNode;
    visitNonNullTypeAst(node: ast.NonNullTypeAst, context: C): l.NonNullTypeNode;
    visitArgumentAst(node: ast.ArgumentAst, context: C): l.ArgumentNode;
    visitDirectiveAst(node: ast.DirectiveAst, context: C): l.DirectiveNode;
}
