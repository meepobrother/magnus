import * as ast from './visitor';
export declare class ExpressionVisitor implements ast.Visitor {
    name: string;
    visitTypeParameterDeclaration(node: ast.TypeParameterDeclaration, context: any): any;
    visitSourceFile(node: ast.SourceFile, context: any): any;
    visitMethodDeclaration(node: ast.MethodDeclaration, context: any): void;
    visitExpressionStatement(node: ast.ExpressionStatement, context: any): any;
    visitObjectLiteralExpression(node: ast.ObjectLiteralExpression, context: any): {};
    visitPropertyAssignment(node: ast.PropertyAssignment, context: any): any;
    visitStringLiteral(node: ast.StringLiteral, context: any): string;
    visitBooleanLiteral(node: ast.BooleanLiteral, context: any): boolean;
    visitNumericLiteral(node: ast.NumericLiteral, context: any): string;
    visitArrayLiteralExpression(node: ast.ArrayLiteralExpression, context: any): any;
    visitIdentifier(node: ast.Identifier, context: any): string;
    visitDecorator(node: ast.Decorator, context: any): any;
    visitCallExpression(node: ast.CallExpression, context: any): any;
    visitTypeReferenceNode(node: ast.TypeReferenceNode, context: any): any;
    visitImportDeclaration(node: ast.ImportDeclaration, context: any): {
        kind: string;
        moduleSpecifier: any;
        importClause: any;
    };
    visitImportClause(node: ast.ImportClause, context: any): any;
    visitNamedImportBindings(node: ast.NamedImportBindings, context: any): any;
    visitNamespaceImport(node: ast.NamespaceImport, context: any): any;
    visitNamedImports(node: ast.NamedImports, context: any): any;
    visitArrayTypeNode(node: ast.ArrayTypeNode, context: any): any;
    visitNoSubstitutionTemplateLiteral(node: ast.NoSubstitutionTemplateLiteral, context: any): string;
    visitKeywordTypeNode(node: ast.KeywordTypeNode, context: any): import("./util").KeywordType;
    visitPropertyAccessExpression(node: ast.PropertyAccessExpression, context: any): void;
    visitQualifiedName(node: ast.QualifiedName, context: any): void;
    visitArrayBindingPattern(node: ast.ArrayBindingPattern, context: any): void;
    visitArrowFunction(node: ast.ArrowFunction, context: any): void;
    visitAsExpression(node: ast.AsExpression, context: any): void;
    visitAsteriskToken(node: ast.AsteriskToken, context: any): void;
    visitAwaitExpression(node: ast.AwaitExpression, context: any): void;
    visitAwaitKeywordToken(node: ast.AwaitKeywordToken, context: any): void;
    visitBigIntLiteral(node: ast.BigIntLiteral, context: any): void;
    visitBinaryExpression(node: ast.BinaryExpression, context: any): void;
    visitBinaryOperatorToken(node: ast.BinaryOperatorToken, context: any): void;
    visitNewExpression(node: ast.NewExpression, context: any): void;
    visitUnionTypeNode(node: ast.UnionTypeNode, context: any): void;
    visitNullLiteral(node: ast.NullLiteral, context: any): void;
    visitShorthandPropertyAssignment(node: ast.ShorthandPropertyAssignment, context: any): void;
}
export declare const expressionVisitor: ExpressionVisitor;
